import os
import io
import logging
import base64
import sys
import sqlite3
import json
from datetime import datetime
import os
import glob
import time
import shutil
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, InputMediaPhoto
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler, PreCheckoutQueryHandler
from openai import OpenAI
from openai import OpenAIError

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = "images/temp"
os.makedirs(TEMP_DIR, exist_ok=True)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# API keys
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    
# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"TELEGRAM_TOKEN: {'***' + TELEGRAM_TOKEN[-4:] if TELEGRAM_TOKEN else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"BOT_USERNAME: {BOT_USERNAME if BOT_USERNAME else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"OPENAI_API_KEY: {'***' + OPENAI_API_KEY[-4:] if OPENAI_API_KEY else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

# Constants for balance system
INITIAL_BALANCE = 25  # Stars
GENERATION_COST = 25  # Stars per generation

# Constants for Telegram Stars payments
STARS_PACKAGES = [
    {"stars": 50, "price": 50, "label": "2 —Ñ–æ—Ç–æ"},
    {"stars": 100, "price": 100, "label": "4 —Ñ–æ—Ç–æ"},
    {"stars": 250, "price": 250, "label": "10 —Ñ–æ—Ç–æ"},
    {"stars": 500, "price": 500, "label": "20 —Ñ–æ—Ç–æ"}
]

# Initialize database
def get_db_connection():
    """Create and return a connection to the SQLite database."""
    conn = sqlite3.connect('users.db')
    return conn

def init_db():
    """Initialize the database with users table."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        balance INTEGER DEFAULT 10,
        total_generations INTEGER DEFAULT 0,
        last_generation TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()
    logger.info("Database initialized")

# User balance functions
def get_user_balance(user_id):
    """Get user balance from database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return result[0]
    else:
        # Create new user with initial balance
        create_user(user_id, None, None, None)
        return INITIAL_BALANCE

def create_user(user_id, username, first_name, last_name):
    """Create a new user in the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, balance, created_at) 
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, INITIAL_BALANCE, datetime.now()))
    conn.commit()
    conn.close()
    logger.info(f"Created new user: {user_id}")

def update_user_balance(user_id, amount):
    """Update user balance."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    cursor.execute('UPDATE users SET total_generations = total_generations + 1 WHERE user_id = ?', (user_id,))
    cursor.execute('UPDATE users SET last_generation = ? WHERE user_id = ?', (datetime.now(), user_id))
    conn.commit()
    conn.close()
    logger.info(f"Updated balance for user {user_id}: {amount}")

def check_balance_sufficient(user_id):
    """Check if user has sufficient balance for generation."""
    balance = get_user_balance(user_id)
    return balance >= GENERATION_COST

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Create images directory if it doesn't exist
if not os.path.exists("images"):
    os.makedirs("images")
    logger.info("–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

def test_openai_connection():
    """Test connection to OpenAI API."""
    try:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Hello!"}],
            max_tokens=10
        )
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI —É—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        return True
    except Exception as e:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
        # Return True anyway to allow the bot to start
        return True

def create_main_menu():
    """Create the main menu keyboard."""
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate_image")],
        [InlineKeyboardButton("‚≠ê –ú–æ–∏ –∑–≤—ë–∑–¥—ã", callback_data="check_balance")],
        [InlineKeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="topup_balance")],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friend")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_topup_menu():
    """Create the topup menu keyboard."""
    keyboard = []
    for package in STARS_PACKAGES:
        generations = package["stars"] // GENERATION_COST
        keyboard.append([InlineKeyboardButton(
            f"{package['label']} ‚Ä¢ {package['stars']} –∑–≤–µ–∑–¥", 
            callback_data=f"buy_stars_{package['stars']}"
        )])
    keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    
    # Create or update user in database
    create_user(user.id, user.username, user.first_name, user.last_name)
    
    # Get user balance
    balance = get_user_balance(user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "‚ú® –Ø –±–æ—Ç –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö. ‚ú®\n\n"
        "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª—è—Ö Disney, Ghibli, Lego –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.\n\n"
        "üì± –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤—ë–∑–¥\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ: ‚≠ê {GENERATION_COST} –∑–≤—ë–∑–¥\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å "
        "<a href='https://telegra.ph/POLITIKA-KONFIDENCIALNOSTI-04-05-9'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> –∏ "
        "<a href='https://telegra.ph/USLOVIYA-ISPOLZOVANIYA-04-05'>–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>"
    )
    
    update.message.reply_html(welcome_text, disable_web_page_preview=True)
    
    # Send demo images as a group
    demo_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "demo")
    
    # Prepare media group with all demo images
    media_group = []
    demo_files = [
        ("image ghibli.png", "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"),
        ("disney.png", None),
        ("lego.png", None)
    ]
    
    # Create InputMediaPhoto objects for each demo image
    for i, (file_name, caption) in enumerate(demo_files):
        file_path = os.path.join(demo_dir, file_name)
        try:
            with open(file_path, 'rb') as photo_file:
                media_group.append(InputMediaPhoto(
                    media=photo_file.read(),
                    caption=caption if i == 0 else None  # Caption only for the first image
                ))
        except Exception as e:
            logger.error(f"Error loading demo image {file_name}: {e}")
    
    # Send media group
    if media_group:
        try:
            context.bot.send_media_group(
                chat_id=update.effective_chat.id, 
                media=media_group
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            action_message = (
                "üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ.\n\n"
                "üåü –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 50% –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –≤–∏–¥–µ –∑–≤—ë–∑–¥."
            )
            update.message.reply_text(action_message, reply_markup=create_main_menu())
            
        except Exception as e:
            logger.error(f"Error sending demo images: {e}")
            # Fallback to sending images one by one if group fails
            for file_name, caption in demo_files:
                file_path = os.path.join(demo_dir, file_name)
                try:
                    with open(file_path, 'rb') as photo:
                        context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=photo,
                            caption=caption
                        )
                except Exception as e:
                    logger.error(f"Error sending individual demo image {file_name}: {e}")

def menu_command(update: Update, context: CallbackContext) -> None:
    """Display the main menu."""
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    
    update.message.reply_text(
        f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n",
        reply_markup=create_main_menu()
    )

def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    
    update.message.reply_text(
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n"
        "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å—Ç–∏–ª–µ —Å—Ç—É–¥–∏–∏ Ghibli!\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        reply_markup=create_main_menu()
    )

def balance_command(update: Update, context: CallbackContext) -> None:
    """Show user balance."""
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    
    # Create inline keyboard for balance options
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n",
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext) -> None:
    """Handle button presses."""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    balance = get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π (–∏–º–µ–µ—Ç –ø–æ–ª–µ photo)
    is_photo_message = hasattr(query.message, 'photo') and query.message.photo
    
    if query.data == "generate_image":
        # Create style selection keyboard
        keyboard = [
            [InlineKeyboardButton("Ghibli (–ê–Ω–∏–º–µ)", callback_data="style_ghibli")],
            [InlineKeyboardButton("Disney", callback_data="style_disney")],
            [InlineKeyboardButton("Lego", callback_data="style_lego")],
            [InlineKeyboardButton("–ö—É–∫–ª–∞ –ë–ª–∞–π–∑", callback_data="style_blythe")],
            [InlineKeyboardButton("–°–∏–º–ø—Å–æ–Ω—ã", callback_data="style_simpsons")],
            [InlineKeyboardButton("–°–æ–≤–µ—Ç—Å–∫–∏–π –º—É–ª—å—Ç", callback_data="style_soviet")],
            [InlineKeyboardButton("Marvel", callback_data="style_marvel")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    elif query.data == "check_balance":
        # Create inline keyboard for balance options
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n",
            reply_markup=reply_markup
        )
    
    elif query.data == "topup_balance":
        # Display star packages menu
        topup_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        if is_photo_message:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=topup_text,
                reply_markup=create_topup_menu()
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            query.edit_message_text(
                text=topup_text,
                reply_markup=create_topup_menu()
            )
    
    elif query.data.startswith("buy_stars_"):
        stars_amount = int(query.data.split("_")[2])
        
        # Find the package
        package = next((p for p in STARS_PACKAGES if p["stars"] == stars_amount), None)
        
        if package:
            # Create invoice for Telegram Stars payment
            title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {stars_amount} –∑–≤–µ–∑–¥"
            description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {stars_amount} –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ Ghibli"
            
            # –°–æ–∑–¥–∞–µ–º payload —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–≤–µ–∑–¥
            payload = json.dumps({
                "user_id": user_id,
                "stars": stars_amount,
                "price": package["price"]
            })
            
            # –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Telegram Stars –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π provider_token
            provider_token = ""  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            currency = "XTR"  # Telegram Stars currency code
            
            # –î–ª—è Telegram Stars –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∞ –Ω–µ —Ü–µ–Ω—É
            price_amount = stars_amount  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–Ω —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
            prices = [LabeledPrice(label=f"{stars_amount} –∑–≤–µ–∑–¥", amount=price_amount)]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: stars={stars_amount}, price={package['price']}, price_amount={price_amount}")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
                context.bot.send_invoice(
                    chat_id=user_id,
                    title=title,
                    description=description,
                    payload=payload,
                    provider_token=provider_token,  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    currency=currency,
                    prices=prices,
                    need_name=False,
                    need_phone_number=False,
                    need_email=False,
                    need_shipping_address=False,
                    is_flexible=False,
                    start_parameter="pay"  # –î–æ–±–∞–≤–ª—è–µ–º start_parameter –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                )
                
                query.edit_message_text(
                    text=f"–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É {stars_amount} –∑–≤–µ–∑–¥ —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
                logger.info(f"–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É {stars_amount} –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
                query.edit_message_text(
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )

    elif query.data == "invite_friend":
        # Create bot's username link
        bot_username = BOT_USERNAME
        invite_link = f"https://t.me/{bot_username}?start={user_id}"
        
        # Generate message with affiliate link instructions
        message = (
            "üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã! üéâ\n\n"
            "–ü—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–≥–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50% –æ—Ç –≤—Å–µ—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ—Ç—Ä–∞—Ç–∏—Ç –≤ –±–æ—Ç–µ.\n\n"
            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ —à–∞–ø–∫—É –±–æ—Ç–∞ @" + bot_username + "\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –¥—Ä—É–∑—å—è–º"
        )
        
        query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
        
    elif query.data == "help":
        query.edit_message_text(
            text="–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
                "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã)\n"
                "3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                "4. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ!\n\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n\n"
                "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π:\n"
                "–ü–æ–ª—É—á–∞–π—Ç–µ 50% –æ—Ç –≤—Å–µ—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ—Ç—Ä–∞—Ç—è—Ç –≤ –±–æ—Ç–µ.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
    
    elif query.data.startswith("style_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        selected_style = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –∏–∑ callback_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_data' not in context.user_data:
            context.user_data['user_data'] = {}
        
        context.user_data['user_data']['selected_style'] = selected_style
        
        # –ù–∞–π–¥–µ–º –∏–º—è —Å—Ç–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        style_display_names = {
            "ghibli": "Ghibli (–ê–Ω–∏–º–µ)",
            "disney": "Disney",
            "lego": "Lego",
            "blythe": "–ö—É–∫–ª–∞ –ë–ª–∞–π–∑",
            "simpsons": "–°–∏–º–ø—Å–æ–Ω—ã",
            "soviet": "–°–æ–≤–µ—Ç—Å–∫–∏–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º",
            "marvel": "Marvel"
        }
        
        style_name = style_display_names.get(selected_style, "–≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_sufficient = balance >= GENERATION_COST
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        if balance_sufficient:
            balance_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥ | –í–∞—à –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥"
            action_text = f"üëá <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>, —á—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ—ë –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å!"
        else:
            balance_text = f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥ | –í–∞—à –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥"
            action_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ {style_name}"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        keyboard = []
        if not balance_sufficient:
            keyboard.append([InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")])
        
        keyboard.append([InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="generate_image")])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
        query.edit_message_text(
            text=f"üí´ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å: <b>{style_name}</b>\n\n"
                 f"{action_text}\n\n"
                 f"{balance_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {style_name}")
    
    elif query.data == "generate_new":
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ"
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        keyboard = [
            [InlineKeyboardButton("Ghibli (–ê–Ω–∏–º–µ)", callback_data="style_ghibli")],
            [InlineKeyboardButton("Disney", callback_data="style_disney")],
            [InlineKeyboardButton("Lego", callback_data="style_lego")],
            [InlineKeyboardButton("–ö—É–∫–ª–∞ –ë–ª–∞–π–∑", callback_data="style_blythe")],
            [InlineKeyboardButton("–°–∏–º–ø—Å–æ–Ω—ã", callback_data="style_simpsons")],
            [InlineKeyboardButton("–°–æ–≤–µ—Ç—Å–∫–∏–π –º—É–ª—å—Ç", callback_data="style_soviet")],
            [InlineKeyboardButton("Marvel", callback_data="style_marvel")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        if is_photo_message:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
    
    elif query.data == "back_to_menu":
        menu_text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"\
                  f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"\
                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        if is_photo_message:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=menu_text,
                reply_markup=create_main_menu()
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            query.edit_message_text(
                text=menu_text,
                reply_markup=create_main_menu()
            )

def precheckout_callback(update: Update, context: CallbackContext) -> None:
    """Handle the pre-checkout callback."""
    query = update.pre_checkout_query
    
    try:
        # Parse the payload
        payload = json.loads(query.invoice_payload)
        user_id = payload.get("user_id")
        stars = payload.get("stars")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: user_id={user_id}, stars={stars}, total_amount={query.total_amount}")
        
        # Validate the payment
        if user_id and stars:
            # Accept the payment
            query.answer(ok=True)
            logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ–¥–æ–±—Ä–µ–Ω–∞: {stars} –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # Reject the payment
            query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            logger.warning(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def successful_payment_callback(update: Update, context: CallbackContext) -> None:
    """Handle successful payments."""
    payment = update.message.successful_payment
    
    try:
        # Parse the payload
        payload = json.loads(payment.invoice_payload)
        user_id = payload.get("user_id")
        stars = payload.get("stars")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: user_id={user_id}, stars={stars}, total_amount={payment.total_amount}")
        
        if user_id and stars:
            # Add stars to user balance
            update_user_balance(user_id, stars)
            new_balance = get_user_balance(user_id)
            
            # Send confirmation message
            update.message.reply_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: ‚≠ê {stars} –∑–≤–µ–∑–¥\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {new_balance} –∑–≤–µ–∑–¥\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                reply_markup=create_main_menu()
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {stars} –∑–≤–µ–∑–¥. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        else:
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=create_main_menu()
            )
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ user_id –∏–ª–∏ stars")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=create_main_menu()
        )

def process_photo(update: Update, context: CallbackContext) -> None:
    """Process a photo and convert it to the selected style."""
    user_id = update.effective_user.id
    
    # Check if user has sufficient balance
    if not check_balance_sufficient(user_id):
        balance = get_user_balance(user_id)
        update.message.reply_text(
            f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {balance} –∑–≤–µ–∑–¥\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n"
        )
        return
    
    # Get selected style from user data if available
    selected_style = "ghibli"  # Default style
    if 'user_data' in context.user_data and 'selected_style' in context.user_data['user_data']:
        selected_style = context.user_data['user_data']['selected_style']
    
    # Style display names for messages
    style_display_names = {
        "ghibli": "Ghibli (–ê–Ω–∏–º–µ)",
        "disney": "Disney",
        "lego": "Lego",
        "simpsons": "–°–∏–º–ø—Å–æ–Ω—ã",
        "soviet": "–°–æ–≤–µ—Ç—Å–∫–∏–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º",
        "marvel": "Marvel"
    }
    
    style_name = style_display_names.get(selected_style, "–≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    status_messages = [
        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ {style_name}... ‚è≥",
        f"–ó–∞–ø—É—Å–∫–∞—é –º–∞–≥–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ {style_name}...",
        f"–ß—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ {style_name}...",
        f"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∏—Å—É–µ—Ç –≤–∞—Å –≤ —Å—Ç–∏–ª–µ {style_name}...",
        f"–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∏ —É–∂–µ —Å–æ–∑–¥–∞—é—Ç –≤–∞—à –ø–æ—Ä—Ç—Ä–µ—Ç –≤ —Å—Ç–∏–ª–µ {style_name}...",
        f"–°–æ–±–∏—Ä–∞—é –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ {style_name}...",
        f"–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—é—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –æ–±—Ä–∞–∑ –≤ —Å—Ç–∏–ª–µ {style_name}..."
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    import random
    status_message = update.message.reply_text(random.choice(status_messages))
    
    try:
        # Get the photo with the highest resolution
        photo = update.message.photo[-1]
        
        # Download the photo
        photo_file = context.bot.get_file(photo.file_id)
        photo_bytes = photo_file.download_as_bytearray()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        tmp_dir = TEMP_DIR
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        import uuid
        from datetime import datetime
        unique_id = f"{update.effective_user.id}_{datetime.now().strftime('%Y%m%d%H%M%S')}_{str(uuid.uuid4())[:8]}"
        file_path = f"{tmp_dir}/{unique_id}.png"
        
        # Save photo to a temporary file
        with open(file_path, "wb") as f:
            f.write(photo_bytes)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id} –≤ —Å—Ç–∏–ª–µ {style_name}")
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–∞–∑—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_messages = [
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ñ–æ—Ç–æ... üîç",
            "–ò–∑—É—á–∞—é –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞... üëÄ",
            "–†–∞—Å–ø–æ–∑–Ω–∞—é —á–µ—Ä—Ç—ã –ª–∏—Ü–∞... üë§",
            "–ò—â—É –≤–∞—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏... üßê",
            "–ó–∞–ø–∏—Å—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã... üìù"
        ]
        
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=status_message.message_id,
            text=random.choice(analysis_messages)
        )      
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with open(file_path, "rb") as img_file:
                b64_image = base64.b64encode(img_file.read()).decode('utf-8')
            
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system", 
                        "content": "You are an image analysis assistant that provides detailed descriptions of photos to be used for image generation. Be specific and detailed."
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Please describe this person briefly, focusing only on visible features like hairstyle, facial features, clothing, accessories, and the background setting. No interpretation, just physical description."},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{b64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=500
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            person_description = response.choices[0].message.content
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ: {person_description[:100]}...")
            
            # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å DALL-E 3
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–∞–∑—ã —Å–æ–∑–¥–∞–Ω–∏—è
            creation_messages = [
                f"–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ {style_name}... üé®",
                f"–î–æ—Å—Ç–∞—é –∫—Ä–∞—Å–∫–∏ –∏ –∫–∏—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ {style_name}... üßò",
                f"–î–µ–ª–∞—é –∏–∑ –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å—Ç–∏–ª–µ {style_name}... üå†",
                f"–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–∞–≥–∏—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ —Å—Ç–∏–ª—å {style_name}... ‚ú®",
                f"–î–µ–ª–∞—é –≤–∞—Å –∑–≤–µ–∑–¥–æ–π –≤ —Å—Ç–∏–ª–µ {style_name}... üåü",
                f"–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç–≤–æ—Ä–∏—Ç —á—É–¥–µ—Å–∞ –≤ —Å—Ç–∏–ª–µ {style_name}... üí´",
                f"–ù–∞–Ω–æ—à—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ {style_name}... üé®"
            ]
            
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=status_message.message_id,
                text=random.choice(creation_messages)
            )
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
            if selected_style == "ghibli":
                prompt = f"""
                Create a Studio Ghibli style animation portrait of this person: {person_description}
                
                The image should have:
                - Distinctive Ghibli hand-drawn animation style
                - Soft watercolor backgrounds
                - Characteristic Ghibli lighting and atmosphere
                - Maintain the person's likeness and key features
                - Use the Ghibli color palette with warm, saturated colors
                - Include some Ghibli-style environment elements
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Ghibli style adaptation.
                """
            elif selected_style == "disney":
                prompt = f"""
                Create a Disney animation style portrait of this person: {person_description}
                
                The image should have:
                - Classic Disney 3D animation style
                - Vivid colors and expressive features
                - Characteristic Disney lighting and atmosphere
                - Maintain the person's likeness and key features
                - Include some Disney-style magical environment elements
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Disney style adaptation.
                """
            elif selected_style == "lego":
                prompt = f"""
                Create a LEGO minifigure style portrait of this person: {person_description}
                
                The image should have:
                - Authentic LEGO minifigure appearance
                - Plastic toy aesthetic with characteristic LEGO shapes
                - Bright LEGO colors palette
                - Maintain distinguishing features translated to LEGO style
                - Include a LEGO brick background/environment
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the LEGO style adaptation.
                """
            elif selected_style == "simpsons":
                prompt = f"""
                Create a Simpsons style animation portrait of this person: {person_description}
                
                The image should have:
                - Classic Simpsons yellow skin and distinctive art style
                - Simpsons character proportions with overbite
                - Four fingers per hand
                - Typical Simpsons background elements
                - Maintain the person's distinguishing features adapted to Simpsons style
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Simpsons style adaptation.
                """
            elif selected_style == "soviet":
                prompt = f"""
                Create a Soviet animation style portrait of this person: {person_description}
                
                The image should have:
                - Classic Soviet animation aesthetic from the 1970s-80s
                - Soft, painterly style with muted color palette
                - Characteristic round facial features and expressive eyes
                - Gentle outlines and watercolor-like textures
                - Nostalgic Soviet-era background elements
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Soviet animation style adaptation.
                """
            elif selected_style == "marvel":
                prompt = f"""
                Create a Marvel Comics style portrait of this person: {person_description}
                
                The image should have:
                - Dynamic Marvel comic book illustration style
                - Bold outlines and dramatic shading
                - Vibrant comic book colors and contrast
                - Heroic pose and composition
                - Comic panel background elements
                - Maintain the person's distinguishing features adapted to Marvel style
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Marvel style adaptation.
                """
            elif selected_style == "blythe":
                prompt = f"""
                Create a Blythe doll style portrait of this person: {person_description}
                
                The image should have:
                - Characteristic Blythe doll aesthetic with large head and oversized eyes
                - Distinctive glossy finish and porcelain-like skin texture
                - Pastel or vibrant colors typical for Blythe dolls
                - Detailed doll-like features while maintaining recognizable elements of the person
                - Cute, slightly dreamy expression
                - Include some Blythe doll fashion elements and accessories
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Blythe doll style adaptation. Make this into a Blythe doll.
                """
            else:
                # Default to Ghibli if style not recognized
                prompt = f"""
                Create a Studio Ghibli style animation portrait of this person: {person_description}
                
                The image should have:
                - Distinctive Ghibli hand-drawn animation style
                - Soft watercolor backgrounds
                - Characteristic Ghibli lighting and atmosphere
                - Maintain the person's likeness and key features
                - Use the Ghibli color palette with warm, saturated colors
                - Include some Ghibli-style environment elements
                
                I NEED to test how the tool works with this description. DO NOT completely reimagine or change the person's fundamental appearance beyond the Ghibli style adaptation.
                """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å gpt-image-1 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            image_response = client.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                size="1024x1024",
                quality="medium",
                n=1,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
            image_base64 = image_response.data[0].b64_json
            image_bytes = base64.b64decode(image_base64)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            generated_file_path = f"{tmp_dir}/generated_{unique_id}.png"
            with open(generated_file_path, "wb") as f:
                f.write(image_bytes)
                
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {generated_file_path}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            try:
                os.remove(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as file_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {file_error}")
            
            # Deduct stars from user balance
            update_user_balance(user_id, -GENERATION_COST)
            current_balance = get_user_balance(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Å—Ç—Ä–æ–≥–æ 3 –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_new")],
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="topup_balance")],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(generated_file_path, 'rb') as photo_file:
                context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo_file,
                    caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ {style_name}! üåü\n\n–°–ø–∏—Å–∞–Ω–æ: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {current_balance} –∑–≤–µ–∑–¥",
                    reply_markup=reply_markup
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(generated_file_path)
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {generated_file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as file_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {generated_file_path}: {file_error}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id
                )
            except Exception as msg_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_error}")
                
        except OpenAIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                os.remove(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ OpenAI")
            except Exception as file_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {file_error}")
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ø—Ä–æ–±—É–µ–º DALL-E 2 –≤–∞—Ä–∏–∞—Ü–∏–∏
            try:
                context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id,
                    text="–ò—Å–ø–æ–ª—å–∑—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏... üñåÔ∏è"
                )
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                with open(file_path, "rb") as img_file:
                    image_edit = client.images.edit(
                        model="gpt-image-1",
                        image=img_file,
                        prompt=f"Create a {selected_style} style portrait of this person with artistic details",
                        size="1024x1024",
                        quality="medium"
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
                image_base64 = image_edit.data[0].b64_json
                image_bytes = base64.b64decode(image_base64)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                backup_file_path = f"{tmp_dir}/backup_{unique_id}.png"
                with open(backup_file_path, "wb") as f:
                    f.write(image_bytes)
                
                logger.info("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
                
                # Deduct stars from user balance
                update_user_balance(user_id, -GENERATION_COST)
                current_balance = get_user_balance(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                with open(backup_file_path, 'rb') as photo_file:
                    context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo_file,
                        caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)! üåü\n\n–°–ø–∏—Å–∞–Ω–æ: ‚≠ê {GENERATION_COST} –∑–≤–µ–∑–¥\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠ê {current_balance} –∑–≤–µ–∑–¥"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(backup_file_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {backup_file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                except Exception as file_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {backup_file_path}: {file_error}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id
                )
                
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e2}")
                context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id,
                    text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e2)}"
                )
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=status_message.message_id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            )
        except:
            update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
def cleanup_temp_files(context: CallbackContext = None):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –Ω–∞ PythonAnywhere."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    temp_dirs = ["/tmp", "images/temp"] 
    if not os.path.exists("images/temp"):
        os.makedirs("images/temp", exist_ok=True)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ (30 –º–∏–Ω—É—Ç)
    max_age_seconds = 30 * 60
    current_time = time.time()
    deleted_count = 0
    freed_space_bytes = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    for temp_dir in temp_dirs:
        if os.path.exists(temp_dir):
            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for pattern in ["*.png", "*.jpg", "*.jpeg"]:
                for file_path in glob.glob(os.path.join(temp_dir, pattern)):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        file_age = current_time - os.path.getmtime(file_path)
                        
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
                        if file_age > max_age_seconds:
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                            file_size = os.path.getsize(file_path)
                            os.remove(file_path)
                            deleted_count += 1
                            freed_space_bytes += file_size
                            logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}, –≤–æ–∑—Ä–∞—Å—Ç: {file_age:.0f} —Å–µ–∫.")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –ú–ë –¥–ª—è –ª–æ–≥–æ–≤
    freed_space_mb = freed_space_bytes / (1024 * 1024)
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_space_mb:.2f} –ú–ë")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    check_disk_space()

def check_disk_space(min_free_mb=50):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        current_dir = os.path.dirname(os.path.abspath(__file__))
        total, used, free = shutil.disk_usage(current_dir)
        free_mb = free / (1024 * 1024)
        
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {free_mb:.2f} –ú–ë")
        
        # –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        if free_mb < min_free_mb:
            logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {free_mb:.2f} –ú–ë. –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏.")
            emergency_cleanup()
            
        return free_mb
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return None

def emergency_cleanup():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–º –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ."""
    logger.warning("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤!")
    
    temp_dirs = ["/tmp", "images/temp"]
    deleted_count = 0
    
    for temp_dir in temp_dirs:
        if os.path.exists(temp_dir):
            for pattern in ["*.png", "*.jpg", "*.jpeg"]:
                for file_path in glob.glob(os.path.join(temp_dir, pattern)):
                    try:
                        os.remove(file_path)
                        deleted_count += 1
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    logger.info(f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á
def setup_scheduled_tasks(updater):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."""
    job_queue = updater.job_queue
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    job_queue.run_repeating(cleanup_temp_files, interval=30*60, first=10)
    
    # –ë–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å - –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏
    from datetime import time
    time_of_day = time(3, 0, 0)  # 3:00 AM
    job_queue.run_daily(cleanup_temp_files, time=time_of_day)
    
    logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

def text_message(update: Update, context: CallbackContext) -> None:
    """Handle text messages."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update –∏ update.message –Ω–µ None
    if update and update.message:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /start
        if update.message.text and not update.message.text.startswith('/'):
            # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            user = cur.fetchone()
            cur.close()
            conn.close()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            if not user:
                bot_description = (
                    "‚ú® –ß—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç? ‚ú®\n\n"
                    "üé® –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!\n\n"
                    "üì± –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
                    "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å\n"
                    "3. ...–∏ –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
                    "üîÆ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start"
                )
                update.message.reply_text(bot_description)
                return
                
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}: {update.message.text}")
        update.message.reply_text(
            "üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å!\n\n" \
            "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π.",
            reply_markup=create_main_menu()
        )
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ text_message: update = {update}")

def main() -> None:
    """Start the bot."""
    print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @{BOT_USERNAME}...")
    
    # Initialize database
    init_db()
    
    # Test OpenAI connection (but continue anyway)
    test_openai_connection()
    print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # Create the Updater with extended timeout settings
        updater = Updater(TELEGRAM_TOKEN, use_context=True, request_kwargs={'read_timeout': 30, 'connect_timeout': 30})
        logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {TELEGRAM_TOKEN[:5]}...")

        # Get the dispatcher to register handlers
        dispatcher = updater.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        def error_handler(update, context):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
            if update:
                logger.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É: {update}")
                
        dispatcher.add_error_handler(error_handler)
        
        # Add handlers
        dispatcher.add_handler(CommandHandler("start", start))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start")
        
        dispatcher.add_handler(CommandHandler("menu", menu_command))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /menu")
        
        dispatcher.add_handler(CommandHandler("help", help_command))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /help")
        
        dispatcher.add_handler(CommandHandler("balance", balance_command))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /balance")
        
        dispatcher.add_handler(CallbackQueryHandler(button_handler))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫")
        
        dispatcher.add_handler(MessageHandler(Filters.photo, process_photo))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_message))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # Add payment handlers
        dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
        dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π")

        # Start the Bot with more log info
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ start_polling()...")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ start_polling()...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        setup_scheduled_tasks(updater)
        
        # Start the Bot
        updater.start_polling()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files()
        
        # Run the bot until you press Ctrl-C or the process receives SIGINT, SIGTERM or SIGABRT
        updater.idle()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
